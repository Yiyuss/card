/*!
 *  Howler.js v2.2.3
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {
    'use strict';
  
    /** 全局方法 **/
    /***************************************************************************/
  
    /**
     * 創建全局控制器。所有函數和值都會附加到這個對象上。
     */
    var HowlerGlobal = function() {
      this.init();
    };
    HowlerGlobal.prototype = {
      /**
       * 初始化 Howler 核心。
       * @return {Howler}
       */
      init: function() {
        var self = this || Howler;
  
        // 內部屬性
        self._counter = 1000;
        self._html5AudioPool = [];
        self.html5PoolSize = 10;
        self._codecs = {};
        self._howls = [];
        self._muted = false;
        self._volume = 1;
        self._canPlayEvent = 'canplaythrough';
        self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;
  
        // 公共屬性
        self.masterGain = null;
        self.noAudio = false;
        self.usingWebAudio = true;
        self.autoSuspend = true;
        self.ctx = null;
  
        // 設置默認編解碼器檢查值
        self._setupCodecs();
  
        // 返回實例
        return self;
      },
  
      /**
       * 獲取/設置全局音量。
       * @param  {Float} vol 從 0.0 到 1.0 的音量。
       * @return {Howler/Float}     返回 self 或當前音量。
       */
      volume: function(vol) {
        var self = this || Howler;
        vol = parseFloat(vol);
  
        // 如果沒有參數，直接返回當前音量
        if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
          self._volume = vol;
  
          // 如果我們不是在一個 Web Audio 上下文中，我們需要處理音量變化
          if (self.usingWebAudio) {
            if (self.masterGain.gain.setValueAtTime) {
              self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
            } else {
              self.masterGain.gain.value = vol;
            }
          }
  
          // 循環所有 Howl 並改變音量（如果可能）
          for (var i=0; i<self._howls.length; i++) {
            if (!self._howls[i]._webAudio) {
              // 獲取所有的 HTML5 Audio 節點
              var ids = self._howls[i]._getSoundIds();
  
              // 循環所有聲音並改變音量
              for (var j=0; j<ids.length; j++) {
                var sound = self._howls[i]._soundById(ids[j]);
  
                if (sound && sound._node) {
                  sound._node.volume = sound._volume * vol;
                }
              }
            }
          }
  
          return self;
        }
  
        return self._volume;
      },
  
      /**
       * 處理靜音變化。
       * @param  {Boolean} muted 是否靜音。
       * @return {Howler}
       */
      mute: function(muted) {
        var self = this || Howler;
  
        // 如果沒有參數，直接返回當前靜音狀態
        if (typeof muted !== 'undefined') {
          self._muted = muted;
  
          // 如果我們在一個 Web Audio 上下文中，我們需要處理靜音變化
          if (self.usingWebAudio) {
            if (self.masterGain.gain.setValueAtTime) {
              self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
            } else {
              self.masterGain.gain.value = muted ? 0 : self._volume;
            }
          }
  
          // 循環所有 Howl 並靜音（如果可能）
          for (var i=0; i<self._howls.length; i++) {
            if (!self._howls[i]._webAudio) {
              // 獲取所有的 HTML5 Audio 節點
              var ids = self._howls[i]._getSoundIds();
  
              // 循環所有聲音並靜音
              for (var j=0; j<ids.length; j++) {
                var sound = self._howls[i]._soundById(ids[j]);
  
                if (sound && sound._node) {
                  sound._node.muted = (muted) ? true : sound._muted;
                }
              }
            }
          }
  
          return self;
        }
  
        return self._muted;
      },
  
      /**
       * 設置編解碼器支持檢查。
       * @return {Howler}
       */
      _setupCodecs: function() {
        var self = this || Howler;
        var audioTest = null;
  
        // 定義一個檢查函數來設置內部編解碼器狀態
        var checkCodec = function(codec) {
          var result = false;
  
          try {
            result = (audioTest && audioTest.canPlayType('audio/' + codec + ';').replace(/^no$/, ''));
          } catch (e) {
            result = false;
          }
  
          return result;
        };
  
        // 創建一個 HTML5 audio 元素用於測試
        try {
          audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
        } catch (err) {
          return self;
        }
  
        if (!audioTest) {
          return self;
        }
  
        // 檢查支持的 MIME 類型
        var mpegTest = checkCodec('mpeg');
        var mp3Test = checkCodec('mp3');
        var wavTest = checkCodec('wav');
        var oggTest = checkCodec('ogg');
        var aacTest = checkCodec('aac');
        var m4aTest = checkCodec('mp4; codecs="mp4a.40.5"');
  
        self._codecs = {
          mp3: !!mp3Test || !!mpegTest,
          mpeg: !!mpegTest,
          opus: !!oggTest,
          ogg: !!oggTest,
          oga: !!oggTest,
          wav: !!wavTest,
          aac: !!aacTest,
          m4a: !!m4aTest,
          mp4: !!m4aTest,
          weba: !!(audioTest && checkCodec('webm; codecs="vorbis"'))
        };
  
        return self;
      },
  
      /**
       * 獲取文件擴展名。
       * @param  {String} url 音頻文件 URL。
       * @return {String}     文件擴展名。
       */
      _getExt: function(url) {
        var self = this || Howler;
        url = url || '';
        return url.split('?')[0].match(/\.([^.]+)$/);
      }
    };
  
    // 設置全局 Howler 對象
    var Howler = new HowlerGlobal();
  
    /** 組 方法 **/
    /***************************************************************************/
  
    /**
     * 創建一個 Howl 組對象。
     * @param {Object} o 傳遞給 Howl 的初始化參數。
     */
    var Howl = function(o) {
      var self = this;
  
      // 如果沒有傳入音頻文件，拋出錯誤
      if (!o.src || o.src.length === 0) {
        console.error('An array of source files must be passed with any new Howl.');
        return;
      }
  
      self.init(o);
    };
    Howl.prototype = {
      /**
       * 初始化一個新的 Howl 組。
       * @param  {Object} o 傳遞給 Howl 的初始化參數。
       * @return {Howl}
       */
      init: function(o) {
        var self = this;
  
        // 如果沒有音頻支持，直接返回
        if (Howler.noAudio) {
          return self;
        }
  
        // 設置非用戶選項
        self._autoplay = false;
        self._format = (typeof o.format !== 'string') ? o.format : [o.format];
        self._html5 = o.html5 || false;
        self._muted = o.mute || false;
        self._loop = o.loop || false;
        self._pool = o.pool || 5;
        self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;
        self._rate = o.rate || 1;
        self._sprite = o.sprite || {};
        self._src = (typeof o.src !== 'string') ? o.src : [o.src];
        self._volume = o.volume !== undefined ? o.volume : 1;
        self._xhr = {
          method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',
          headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,
          withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,
        };
  
        // 設置 Web Audio 或 HTML5 Audio
        self._webAudio = true;
  
        // 加載音頻文件
        if (self._preload !== 'none') {
          self.load();
        }
  
        return self;
      },
  
      /**
       * 加載音頻文件。
       * @return {Howl}
       */
      load: function() {
        var self = this;
        var url = null;
  
        // 如果沒有音頻支持，直接返回
        if (Howler.noAudio) {
          self._emit('loaderror', null, 'No audio support.');
          return;
        }
  
        // 確定要使用哪個源
        for (var i=0; i<self._src.length; i++) {
          var ext, str;
  
          if (self._format && self._format[i]) {
            // 如果提供了擴展名，使用指定的擴展名
            ext = self._format[i];
          } else {
            // 從 URL 獲取擴展名
            str = self._src[i];
            ext = Howler._getExt(str);
            ext = (ext && ext.length > 1) ? ext[1] : str.split('.').pop();
          }
  
          // 檢查此擴展名是否支持
          if (Howler._codecs[ext]) {
            url = self._src[i];
            break;
          }
        }
  
        if (!url) {
          self._emit('loaderror', null, 'No codec support for selected audio sources.');
          return;
        }
  
        self._src = url;
        self._state = 'loading';
  
        // 如果這是一個 HTML5 Audio 元素
        if (self._html5) {
          self._loadHtml5();
        }
  
        return self;
      },
  
      /**
       * 加載 HTML5 Audio 元素。
       * @return {Howl}
       */
      _loadHtml5: function() {
        var self = this;
        var url = self._src;
  
        // 創建一個新的 HTML5 Audio 節點
        var node = new Audio();
        node.addEventListener('error', function() {
          if (node.error && node.error.code === 4) {
            self._emit('loaderror', null, 'Not found.');
          } else {
            self._emit('loaderror', null, 'Loading error.');
          }
        }, false);
        node.addEventListener('canplaythrough', function() {
          self._emit('load');
        }, false);
        node.src = url;
        node.preload = 'auto';
        node.volume = Howler._muted ? 0 : self._volume * Howler.volume();
  
        // 保存節點引用
        self._node = node;
  
        return self;
      },
  
      /**
       * 播放一個聲音或恢復之前暫停的聲音。
       * @param  {String/Number} sprite   (可選) 要播放的精靈名稱或聲音 id。
       * @param  {Boolean} internal (內部) 內部標誌，用於跟踪播放。
       * @return {Number}          返回聲音 id。
       */
      play: function(sprite, internal) {
        var self = this;
        var id = null;
  
        // 如果沒有聲音節點可用，嘗試立即加載
        if (!self._node && !self._html5) {
          self.load();
        }
  
        // 設置播放精靈（如果沒有提供）
        sprite = (typeof sprite === 'undefined') ? '__default' : sprite;
  
        // 獲取聲音 ID
        id = self._inactiveSound();
  
        // 設置音量
        var volume = (self._muted || Howler._muted) ? 0 : self._volume;
        if (self._node) {
          self._node.volume = volume * Howler.volume();
        }
  
        // 播放聲音
        if (self._node) {
          self._node.play();
        }
  
        return id;
      },
  
      /**
       * 暫停播放。
       * @param  {Number} id (可選) 要暫停的聲音 id。
       * @return {Howl}
       */
      pause: function(id) {
        var self = this;
  
        // 如果沒有 id，暫停所有聲音
        if (self._node) {
          self._node.pause();
        }
  
        return self;
      },
  
      /**
       * 停止播放並重置到開始。
       * @param  {Number} id (可選) 要停止的聲音 id。
       * @return {Howl}
       */
      stop: function(id) {
        var self = this;
  
        // 停止所有聲音
        if (self._node) {
          self._node.pause();
          self._node.currentTime = 0;
        }
  
        return self;
      },
  
      /**
       * 獲取/設置音量。
       * @param  {Float}  vol 音量從 0.0 到 1.0。
       * @param  {Number} id  (可選) 要設置的聲音 id。
       * @return {Howl/Float}     返回 self 或當前音量。
       */
      volume: function(vol, id) {
        var self = this;
  
        // 如果沒有 id，則獲取/設置主音量
        vol = parseFloat(vol);
  
        if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
          self._volume = vol;
  
          // 更新所有節點的音量
          if (self._node) {
            self._node.volume = vol * Howler.volume();
          }
  
          return self;
        } else {
          return self._volume;
        }
      },
  
      /**
       * 獲取/設置是否循環播放。
       * @param  {Boolean} loop 是否循環播放。
       * @param  {Number} id   (可選) 要循環的聲音 id。
       * @return {Howl/Boolean}      返回 self 或當前循環狀態。
       */
      loop: function(loop, id) {
        var self = this;
  
        if (typeof loop === 'boolean') {
          self._loop = loop;
  
          // 更新所有節點的循環狀態
          if (self._node) {
            self._node.loop = loop;
          }
  
          return self;
        } else {
          return self._loop;
        }
      },
  
      /**
       * 獲取/設置靜音狀態。
       * @param  {Boolean} muted 是否靜音。
       * @param  {Number} id    (可選) 要靜音的聲音 id。
       * @return {Howl/Boolean}       返回 self 或當前靜音狀態。
       */
      mute: function(muted, id) {
        var self = this;
  
        // 如果沒有 id，則獲取/設置主靜音狀態
        if (typeof muted === 'boolean') {
          self._muted = muted;
  
          // 更新所有節點的靜音狀態
          if (self._node) {
            self._node.muted = muted;
          }
  
          return self;
        } else {
          return self._muted;
        }
      },
  
      /**
       * 獲取一個非活動的聲音。
       * @return {Sound} 聲音對象。
       */
      _inactiveSound: function() {
        var self = this;
  
        return self._node;
      },
  
      /**
       * 發出事件。
       * @param  {String} event 事件名稱。
       * @param  {Number} id    (可選) 聲音 ID。
       * @param  {String} msg   (可選) 錯誤消息。
       * @return {Howl}
       */
      _emit: function(event, id, msg) {
        var self = this;
  
        // 如果有回調，則調用它
        if (self['_on' + event]) {
          self['_on' + event](id, msg);
        }
  
        return self;
      }
    };
  
    // 暴露 Howler 到全局
    window.Howler = Howler;
    window.Howl = Howl;
  })();